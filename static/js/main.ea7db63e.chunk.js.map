{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","nameInputId","uuidv4","telInputId","state","name","number","changeInput","e","inputName","currentTarget","setState","value","handleFormSubmit","preventDefault","Boolean","props","existContacts","find","element","alert","onFormSubmit","resetInput","this","onSubmit","htmlFor","id","type","pattern","title","required","onChange","Component","ContactList","contactsForList","onDeleteContact","map","contact","onClick","Filter","onFilterValue","App","contacts","filter","addContact","contactData","deleteContact","contactId","prevState","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","visibleContacts","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea7db63e.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass ContactForm extends Component {\n  nameInputId = uuidv4();\n  telInputId = uuidv4();\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  changeInput = e => {\n    const inputName = e.currentTarget.name;\n    this.setState({\n      [inputName]: e.currentTarget.value,\n    });\n  };\n\n  // checkContact = () => {\n  //   this.state.name ===\n  // }\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n    const checkContact = Boolean(\n      this.props.existContacts.find(\n        element => element.name === this.state.name,\n      ),\n    );\n    //console.log(checkContact===true);\n\n    checkContact\n      ? alert(`${this.state.name} is already in contacts`)\n      : this.props.onFormSubmit(this.state);\n\n    this.resetInput();\n  };\n\n  resetInput = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <label htmlFor={this.nameInputId} />\n        <input\n          id={this.nameInputId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          required\n          onChange={this.changeInput}\n        />\n\n        <label htmlFor={this.telInputId} />\n        <input\n          id={this.telInputId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          value={number}\n          required\n          onChange={this.changeInput}\n        />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contactsForList, onDeleteContact }) => (\n  <ul>\n    {contactsForList.map(contact => (\n      <li key={uuidv4()}>\n        {contact.name}:{contact.number}\n        <button type=\"button\" onClick={() => onDeleteContact(contact.id)}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contactsForList: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ContactList;\n","import { v4 as uuidv4 } from 'uuid';\n\nconst Filter = ({ onFilterValue, value }) => (\n  <>\n    <p>Find contacts by name:</p>\n    <label htmlFor={uuidv4()} />\n    <input\n      id={uuidv4()}\n      type=\"text\"\n      name=\"filter\"\n      onChange={onFilterValue}\n      value={value}\n    />\n  </>\n);\n\nexport default Filter;\n","import { Component } from 'react';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n\n    filter: '',\n  };\n\n  addContact = ({ name, number }) => {\n    const contactData = {\n      name,\n      number,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [contactData, ...contacts],\n    }));\n  };\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(\n        contacts => contacts.id !== contactId,\n      ),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({\n      filter: e.currentTarget.value,\n    });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contacts =>\n      contacts.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter, contacts } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onFormSubmit={this.addContact} existContacts={contacts} />\n        {/* filter */}\n        <Filter value={filter} onFilterValue={this.changeFilter} />\n\n        {contacts.length > 0 && (\n          <div>\n            <h2>Contacts</h2>\n            <ContactList\n              contactsForList={visibleContacts}\n              onDeleteContact={this.deleteContact}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}